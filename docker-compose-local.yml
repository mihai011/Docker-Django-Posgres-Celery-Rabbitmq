version: "3"

services:
  backend:
    build:
      context: .
    image: backend
    container_name: backend
    hostname: backend
    restart: on-failure
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    # command: >
    #   sh -c "wait-for db:5432 && wait-for rabbit:5672 &&
    #          python manage.py makemigrations &
    #          python manage.py migrate &&
    #          python manage.py runserver 0.0.0.0:8000 && sleep infinity"
    command: > 
      sh -c "sleep infinity"
    environment:
      - DJANGO_SETTINGS_MODULE=MLplatform.settings.settings
    stdin_open: true
    tty: true
    depends_on:
      - db
      - rabbit
    networks:
      - shared_network

  nginx:
    build: ./nginx
    hostname: nginx
    volumes:
      - ./MLplatform/static:/app/static
    ports:
      - 80:80
    depends_on:
      - backend
    networks: 
      - shared_network

  rabbit:
    image: rabbitmq:3-management
    container_name: rabbit
    hostname: rabbit
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5682:5672"
      - "15682:15672"
    networks:
      - shared_network

  worker_heavy:
    image: backend
    restart: on-failure
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=MLplatform.settings.settings
    command: >
      sh -c "wait-for backend:8000 &&
             celery -A MLplatform.celery worker -Q heavy -l info -E"
    depends_on:
      - backend
      - rabbit
      - db
    networks:
      - shared_network

  worker_medium:
    image: backend
    restart: on-failure
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=MLplatform.settings.settings
    command: >
      sh -c "wait-for backend:8000 &&
             celery -A MLplatform.celery worker -Q medium -l info -E"
    depends_on:
      - backend
      - rabbit
      - db
    networks:
      - shared_network

  worker_easy:
    image: backend
    restart: on-failure
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=MLplatform.settings.settings
    command: >
      sh -c "wait-for backend:8000 &&
             celery -A MLplatform.celery worker -Q easy -l info -E"
    depends_on:
      - backend
      - rabbit
      - db
    networks:
      - shared_network

  mailhog:
    image: mailhog/mailhog
    hostname: mailhog
    ports: 
      - '1025:1025' 
      - '8025:8025' 
    networks:
      - shared_network

  spark:
    image: bitnami/spark
    hostname: spark
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8080:8080'
      - '7077:7077'
    networks:
      - shared_network

  spark-worker-1:
    image: bitnami/spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - shared_network
      
  spark-worker-2:
    image: bitnami/spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - shared_network

  db:
    image: postgres:10-alpine
    container_name: db
    hostname: db
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "54320:5432"
    networks:
      - shared_network
      

networks:
  shared_network:
    driver: bridge
